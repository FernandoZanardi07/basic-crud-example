{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { HttpClient } from '@angular/common/http';\nimport { tap } from 'rxjs/operators';\nimport { AuthService } from './auth.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nexport let MyService = /*#__PURE__*/(() => {\n  class MyService {\n    constructor(http, authService) {\n      this.http = http;\n      this.authService = authService;\n      this.authServer = 'https://localhost:5189/api/';\n      this.webApiServer = 'https://localhost:7101/api/';\n    }\n\n    getAuth(user) {\n      return this.http.post(this.authServer, user).pipe(tap(response => {\n        if (response && response.token) {\n          this.authService.setToken(response.token);\n        }\n      }));\n    }\n\n    getPersons() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let x = yield this.http.get(this.webApiServer + 'person');\n        debugger;\n        return x;\n      });\n    }\n\n  }\n\n  MyService.ɵfac = function MyService_Factory(t) {\n    return new (t || MyService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n  };\n\n  MyService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MyService,\n    factory: MyService.ɵfac,\n    providedIn: 'root'\n  });\n  return MyService;\n})();","map":null,"metadata":{},"sourceType":"module"}