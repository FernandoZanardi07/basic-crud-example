{"ast":null,"code":"import { animation, style, animate, trigger, transition, useAnimation } from '@angular/animations';\nimport * as i1 from '@angular/common';\nimport { isPlatformBrowser, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, inject, NgZone, booleanAttribute, numberAttribute, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, Output, ViewChild, ContentChild, ContentChildren, NgModule } from '@angular/core';\nimport { uuid, blockBodyScroll, unblockBodyScroll, setAttribute, hasClass, addClass, getOuterWidth, getOuterHeight, getViewport, removeClass, appendChild } from '@primeuix/utils';\nimport { TranslationKeys, PrimeTemplate, SharedModule } from 'primeng/api';\nimport { BaseComponent } from 'primeng/basecomponent';\nimport { Button } from 'primeng/button';\nimport { DomHandler } from 'primeng/dom';\nimport { FocusTrap } from 'primeng/focustrap';\nimport { TimesIcon, WindowMaximizeIcon, WindowMinimizeIcon } from 'primeng/icons';\nimport { ZIndexUtils } from 'primeng/utils';\nimport { BaseStyle } from 'primeng/base';\n\nconst theme = ({\n  dt\n}) => `\n.p-dialog {\n    max-height: 90%;\n    transform: scale(1);\n    border-radius: ${dt('dialog.border.radius')};\n    box-shadow: ${dt('dialog.shadow')};\n    background: ${dt('dialog.background')};\n    border: 1px solid ${dt('dialog.border.color')};\n    color: ${dt('dialog.color')};\n    display: flex;\n    flex-direction: column;\n    pointer-events: auto\n}\n\n.p-dialog-content {\n    overflow-y: auto;\n    padding: ${dt('dialog.content.padding')};\n}\n\n.p-dialog-header {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    flex-shrink: 0;\n    padding: ${dt('dialog.header.padding')};\n}\n\n.p-dialog-title {\n    font-weight: ${dt('dialog.title.font.weight')};\n    font-size: ${dt('dialog.title.font.size')};\n}\n\n.p-dialog-footer {\n    flex-shrink: 0;\n    padding: ${dt('dialog.footer.padding')};\n    display: flex;\n    justify-content: flex-end;\n    gap: ${dt('dialog.footer.gap')};\n}\n\n.p-dialog-header-actions {\n    display: flex;\n    align-items: center;\n    gap: ${dt('dialog.header.gap')};\n}\n\n.p-dialog-enter-active {\n    transition: all 150ms cubic-bezier(0, 0, 0.2, 1);\n}\n\n.p-dialog-leave-active {\n    transition: all 150ms cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.p-dialog-enter-from,\n.p-dialog-leave-to {\n    opacity: 0;\n    transform: scale(0.7);\n}\n\n.p-dialog-top .p-dialog,\n.p-dialog-bottom .p-dialog,\n.p-dialog-left .p-dialog,\n.p-dialog-right .p-dialog,\n.p-dialog-topleft .p-dialog,\n.p-dialog-topright .p-dialog,\n.p-dialog-bottomleft .p-dialog,\n.p-dialog-bottomright .p-dialog {\n    margin: 0.75rem;\n    transform: translate3d(0px, 0px, 0px);\n}\n\n.p-dialog-top .p-dialog-enter-active,\n.p-dialog-top .p-dialog-leave-active,\n.p-dialog-bottom .p-dialog-enter-active,\n.p-dialog-bottom .p-dialog-leave-active,\n.p-dialog-left .p-dialog-enter-active,\n.p-dialog-left .p-dialog-leave-active,\n.p-dialog-right .p-dialog-enter-active,\n.p-dialog-right .p-dialog-leave-active,\n.p-dialog-topleft .p-dialog-enter-active,\n.p-dialog-topleft .p-dialog-leave-active,\n.p-dialog-topright .p-dialog-enter-active,\n.p-dialog-topright .p-dialog-leave-active,\n.p-dialog-bottomleft .p-dialog-enter-active,\n.p-dialog-bottomleft .p-dialog-leave-active,\n.p-dialog-bottomright .p-dialog-enter-active,\n.p-dialog-bottomright .p-dialog-leave-active {\n    transition: all 0.3s ease-out;\n}\n\n.p-dialog-top .p-dialog-enter-from,\n.p-dialog-top .p-dialog-leave-to {\n    transform: translate3d(0px, -100%, 0px);\n}\n\n.p-dialog-bottom .p-dialog-enter-from,\n.p-dialog-bottom .p-dialog-leave-to {\n    transform: translate3d(0px, 100%, 0px);\n}\n\n.p-dialog-left .p-dialog-enter-from,\n.p-dialog-left .p-dialog-leave-to,\n.p-dialog-topleft .p-dialog-enter-from,\n.p-dialog-topleft .p-dialog-leave-to,\n.p-dialog-bottomleft .p-dialog-enter-from,\n.p-dialog-bottomleft .p-dialog-leave-to {\n    transform: translate3d(-100%, 0px, 0px);\n}\n\n.p-dialog-right .p-dialog-enter-from,\n.p-dialog-right .p-dialog-leave-to,\n.p-dialog-topright .p-dialog-enter-from,\n.p-dialog-topright .p-dialog-leave-to,\n.p-dialog-bottomright .p-dialog-enter-from,\n.p-dialog-bottomright .p-dialog-leave-to {\n    transform: translate3d(100%, 0px, 0px);\n}\n\n.p-dialog-left:dir(rtl) .p-dialog-enter-from,\n.p-dialog-left:dir(rtl) .p-dialog-leave-to,\n.p-dialog-topleft:dir(rtl) .p-dialog-enter-from,\n.p-dialog-topleft:dir(rtl) .p-dialog-leave-to,\n.p-dialog-bottomleft:dir(rtl) .p-dialog-enter-from,\n.p-dialog-bottomleft:dir(rtl) .p-dialog-leave-to {\n    transform: translate3d(100%, 0px, 0px);\n}\n\n.p-dialog-right:dir(rtl) .p-dialog-enter-from,\n.p-dialog-right:dir(rtl) .p-dialog-leave-to,\n.p-dialog-topright:dir(rtl) .p-dialog-enter-from,\n.p-dialog-topright:dir(rtl) .p-dialog-leave-to,\n.p-dialog-bottomright:dir(rtl) .p-dialog-enter-from,\n.p-dialog-bottomright:dir(rtl) .p-dialog-leave-to {\n    transform: translate3d(-100%, 0px, 0px);\n}\n\n.p-dialog-maximized {\n    width: 100vw !important;\n    height: 100vh !important;\n    top: 0px !important;\n    left: 0px !important;\n    max-height: 100%;\n    height: 100%;\n    border-radius: 0;\n}\n\n.p-dialog-maximized .p-dialog-content {\n    flex-grow: 1;\n}\n\n.p-overlay-mask:dir(rtl) {\n    flex-direction: row-reverse;\n}\n\n/* For PrimeNG */\n\n.p-dialog .p-resizable-handle {\n    position: absolute;\n    font-size: 0.1px;\n    display: block;\n    cursor: se-resize;\n    width: 12px;\n    height: 12px;\n    right: 1px;\n    bottom: 1px;\n}\n\n.p-confirm-dialog .p-dialog-content {\n    display: flex;\n    align-items: center;\n}\n`;\n/* Position */\n\n\nconst inlineStyles = {\n  mask: ({\n    instance\n  }) => ({\n    position: 'fixed',\n    height: '100%',\n    width: '100%',\n    left: 0,\n    top: 0,\n    display: 'flex',\n    justifyContent: instance.position === 'left' || instance.position === 'topleft' || instance.position === 'bottomleft' ? 'flex-start' : instance.position === 'right' || instance.position === 'topright' || instance.position === 'bottomright' ? 'flex-end' : 'center',\n    alignItems: instance.position === 'top' || instance.position === 'topleft' || instance.position === 'topright' ? 'flex-start' : instance.position === 'bottom' || instance.position === 'bottomleft' || instance.position === 'bottomright' ? 'flex-end' : 'center',\n    pointerEvents: instance.modal ? 'auto' : 'none'\n  }),\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    pointerEvents: 'auto'\n  }\n};\nconst classes = {\n  mask: ({\n    instance\n  }) => {\n    const positions = ['left', 'right', 'top', 'topleft', 'topright', 'bottom', 'bottomleft', 'bottomright'];\n    const pos = positions.find(item => item === instance.position);\n    return {\n      'p-dialog-mask': true,\n      'p-overlay-mask p-overlay-mask-enter': instance.modal,\n      [`p-dialog-${pos}`]: pos\n    };\n  },\n  root: ({\n    instance\n  }) => ({\n    'p-dialog p-component': true,\n    'p-dialog-maximized': instance.maximizable && instance.maximized\n  }),\n  header: 'p-dialog-header',\n  title: 'p-dialog-title',\n  resizeHandle: 'p-resizable-handle',\n  headerActions: 'p-dialog-header-actions',\n  pcMaximizeButton: 'p-dialog-maximize-button',\n  pcCloseButton: 'p-dialog-close-button',\n  content: 'p-dialog-content',\n  footer: 'p-dialog-footer'\n};\n\nclass DialogStyle extends BaseStyle {\n  name = 'dialog';\n  theme = theme;\n  classes = classes;\n  inlineStyles = inlineStyles;\n  static ɵfac = /*@__PURE__*/(() => {\n    let ɵDialogStyle_BaseFactory;\n    return function DialogStyle_Factory(__ngFactoryType__) {\n      return (ɵDialogStyle_BaseFactory || (ɵDialogStyle_BaseFactory = i0.ɵɵgetInheritedFactory(DialogStyle)))(__ngFactoryType__ || DialogStyle);\n    };\n  })();\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DialogStyle,\n    factory: DialogStyle.ɵfac\n  });\n}\n\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DialogStyle, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n *\n * Dialog is a container to display content in an overlay window.\n *\n * [Live Demo](https://www.primeng.org/dialog)\n *\n * @module dialogstyle\n *\n */\n\n\nvar DialogClasses = /*#__PURE__*/(() => {\n  (function (DialogClasses) {\n    /**\n     * Class name of the mask element\n     */\n    DialogClasses[\"mask\"] = \"p-dialog-mask\";\n    /**\n     * Class name of the root element\n     */\n\n    DialogClasses[\"root\"] = \"p-dialog\";\n    /**\n     * Class name of the header element\n     */\n\n    DialogClasses[\"header\"] = \"p-dialog-header\";\n    /**\n     * Class name of the title element\n     */\n\n    DialogClasses[\"title\"] = \"p-dialog-title\";\n    /**\n     * Class name of the header actions element\n     */\n\n    DialogClasses[\"headerActions\"] = \"p-dialog-header-actions\";\n    /**\n     * Class name of the maximize button element\n     */\n\n    DialogClasses[\"pcMaximizeButton\"] = \"p-dialog-maximize-button\";\n    /**\n     * Class name of the close button element\n     */\n\n    DialogClasses[\"pcCloseButton\"] = \"p-dialog-close-button\";\n    /**\n     * Class name of the content element\n     */\n\n    DialogClasses[\"content\"] = \"p-dialog-content\";\n    /**\n     * Class name of the footer element\n     */\n\n    DialogClasses[\"footer\"] = \"p-dialog-footer\";\n  })(DialogClasses || (DialogClasses = {}));\n\n  return DialogClasses;\n})();\nconst _c0 = [\"header\"];\nconst _c1 = [\"content\"];\nconst _c2 = [\"footer\"];\nconst _c3 = [\"closeicon\"];\nconst _c4 = [\"maximizeicon\"];\nconst _c5 = [\"minimizeicon\"];\nconst _c6 = [\"headless\"];\nconst _c7 = [\"titlebar\"];\nconst _c8 = [\"*\", [[\"p-footer\"]]];\nconst _c9 = [\"*\", \"p-footer\"];\n\nconst _c10 = (a0, a1, a2) => ({\n  position: \"fixed\",\n  height: \"100%\",\n  width: \"100%\",\n  left: 0,\n  top: 0,\n  display: \"flex\",\n  \"justify-content\": a0,\n  \"align-items\": a1,\n  \"pointer-events\": a2\n});\n\nconst _c11 = a0 => ({\n  \"p-dialog p-component\": true,\n  \"p-dialog-maximized\": a0\n});\n\nconst _c12 = () => ({\n  display: \"flex\",\n  \"flex-direction\": \"column\",\n  \"pointer-events\": \"auto\"\n});\n\nconst _c13 = (a0, a1) => ({\n  transform: a0,\n  transition: a1\n});\n\nconst _c14 = a0 => ({\n  value: \"visible\",\n  params: a0\n});\n\nfunction Dialog_div_0_div_1_ng_container_2_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction Dialog_div_0_div_1_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, Dialog_div_0_div_1_ng_container_2_ng_container_1_Template, 1, 0, \"ng-container\", 11);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1._headlessTemplate || ctx_r1.headlessTemplate || ctx_r1.headlessT);\n  }\n}\n\nfunction Dialog_div_0_div_1_ng_template_3_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵlistener(\"mousedown\", function Dialog_div_0_div_1_ng_template_3_div_0_Template_div_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r1 = i0.ɵɵnextContext(4);\n      return i0.ɵɵresetView(ctx_r1.initResize($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(4);\n    i0.ɵɵproperty(\"ngClass\", ctx_r1.cx(\"resizeHandle\"));\n  }\n}\n\nfunction Dialog_div_0_div_1_ng_template_3_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 20);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(4);\n    i0.ɵɵproperty(\"id\", ctx_r1.ariaLabelledBy)(\"ngClass\", ctx_r1.cx(\"title\"));\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r1.header);\n  }\n}\n\nfunction Dialog_div_0_div_1_ng_template_3_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction Dialog_div_0_div_1_ng_template_3_p_button_6_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 15);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(5);\n    i0.ɵɵproperty(\"ngClass\", ctx_r1.maximized ? ctx_r1.minimizeIcon : ctx_r1.maximizeIcon);\n  }\n}\n\nfunction Dialog_div_0_div_1_ng_template_3_p_button_6_ng_container_2_WindowMaximizeIcon_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"WindowMaximizeIcon\");\n  }\n}\n\nfunction Dialog_div_0_div_1_ng_template_3_p_button_6_ng_container_2_WindowMinimizeIcon_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"WindowMinimizeIcon\");\n  }\n}\n\nfunction Dialog_div_0_div_1_ng_template_3_p_button_6_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, Dialog_div_0_div_1_ng_template_3_p_button_6_ng_container_2_WindowMaximizeIcon_1_Template, 1, 0, \"WindowMaximizeIcon\", 22)(2, Dialog_div_0_div_1_ng_template_3_p_button_6_ng_container_2_WindowMinimizeIcon_2_Template, 1, 0, \"WindowMinimizeIcon\", 22);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(5);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.maximized && !ctx_r1._maximizeiconTemplate && !ctx_r1.maximizeIconTemplate && !ctx_r1.maximizeIconT);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.maximized && !ctx_r1._minimizeiconTemplate && !ctx_r1.minimizeIconTemplate && !ctx_r1.minimizeIconT);\n  }\n}\n\nfunction Dialog_div_0_div_1_ng_template_3_p_button_6_ng_container_3_1_ng_template_0_Template(rf, ctx) {}\n\nfunction Dialog_div_0_div_1_ng_template_3_p_button_6_ng_container_3_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Dialog_div_0_div_1_ng_template_3_p_button_6_ng_container_3_1_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\n\nfunction Dialog_div_0_div_1_ng_template_3_p_button_6_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, Dialog_div_0_div_1_ng_template_3_p_button_6_ng_container_3_1_Template, 1, 0, null, 11);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(5);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1._maximizeiconTemplate || ctx_r1.maximizeIconTemplate || ctx_r1.maximizeIconT);\n  }\n}\n\nfunction Dialog_div_0_div_1_ng_template_3_p_button_6_ng_container_4_1_ng_template_0_Template(rf, ctx) {}\n\nfunction Dialog_div_0_div_1_ng_template_3_p_button_6_ng_container_4_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Dialog_div_0_div_1_ng_template_3_p_button_6_ng_container_4_1_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\n\nfunction Dialog_div_0_div_1_ng_template_3_p_button_6_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, Dialog_div_0_div_1_ng_template_3_p_button_6_ng_container_4_1_Template, 1, 0, null, 11);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(5);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1._minimizeiconTemplate || ctx_r1.minimizeIconTemplate || ctx_r1.minimizeIconT);\n  }\n}\n\nfunction Dialog_div_0_div_1_ng_template_3_p_button_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"p-button\", 21);\n    i0.ɵɵlistener(\"onClick\", function Dialog_div_0_div_1_ng_template_3_p_button_6_Template_p_button_onClick_0_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r1 = i0.ɵɵnextContext(4);\n      return i0.ɵɵresetView(ctx_r1.maximize());\n    })(\"keydown.enter\", function Dialog_div_0_div_1_ng_template_3_p_button_6_Template_p_button_keydown_enter_0_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r1 = i0.ɵɵnextContext(4);\n      return i0.ɵɵresetView(ctx_r1.maximize());\n    });\n    i0.ɵɵtemplate(1, Dialog_div_0_div_1_ng_template_3_p_button_6_span_1_Template, 1, 1, \"span\", 18)(2, Dialog_div_0_div_1_ng_template_3_p_button_6_ng_container_2_Template, 3, 2, \"ng-container\", 22)(3, Dialog_div_0_div_1_ng_template_3_p_button_6_ng_container_3_Template, 2, 1, \"ng-container\", 22)(4, Dialog_div_0_div_1_ng_template_3_p_button_6_ng_container_4_Template, 2, 1, \"ng-container\", 22);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(4);\n    i0.ɵɵproperty(\"styleClass\", ctx_r1.cx(\"pcMaximizeButton\"))(\"tabindex\", ctx_r1.maximizable ? \"0\" : \"-1\")(\"ariaLabel\", ctx_r1.maximizeLabel)(\"buttonProps\", ctx_r1.maximizeButtonProps);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.maximizeIcon && !ctx_r1._maximizeiconTemplate && !ctx_r1._minimizeiconTemplate);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.maximizeIcon && !(ctx_r1.maximizeButtonProps == null ? null : ctx_r1.maximizeButtonProps.icon));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.maximized);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.maximized);\n  }\n}\n\nfunction Dialog_div_0_div_1_ng_template_3_p_button_7_ng_template_1_ng_container_0_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 15);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(7);\n    i0.ɵɵproperty(\"ngClass\", ctx_r1.closeIcon);\n  }\n}\n\nfunction Dialog_div_0_div_1_ng_template_3_p_button_7_ng_template_1_ng_container_0_TimesIcon_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"TimesIcon\");\n  }\n}\n\nfunction Dialog_div_0_div_1_ng_template_3_p_button_7_ng_template_1_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, Dialog_div_0_div_1_ng_template_3_p_button_7_ng_template_1_ng_container_0_span_1_Template, 1, 1, \"span\", 18)(2, Dialog_div_0_div_1_ng_template_3_p_button_7_ng_template_1_ng_container_0_TimesIcon_2_Template, 1, 0, \"TimesIcon\", 22);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(6);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.closeIcon);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.closeIcon);\n  }\n}\n\nfunction Dialog_div_0_div_1_ng_template_3_p_button_7_ng_template_1_span_1_1_ng_template_0_Template(rf, ctx) {}\n\nfunction Dialog_div_0_div_1_ng_template_3_p_button_7_ng_template_1_span_1_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Dialog_div_0_div_1_ng_template_3_p_button_7_ng_template_1_span_1_1_ng_template_0_Template, 0, 0, \"ng-template\");\n  }\n}\n\nfunction Dialog_div_0_div_1_ng_template_3_p_button_7_ng_template_1_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtemplate(1, Dialog_div_0_div_1_ng_template_3_p_button_7_ng_template_1_span_1_1_Template, 1, 0, null, 11);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(6);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1._closeiconTemplate || ctx_r1.closeIconTemplate || ctx_r1.closeIconT);\n  }\n}\n\nfunction Dialog_div_0_div_1_ng_template_3_p_button_7_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, Dialog_div_0_div_1_ng_template_3_p_button_7_ng_template_1_ng_container_0_Template, 3, 2, \"ng-container\", 22)(1, Dialog_div_0_div_1_ng_template_3_p_button_7_ng_template_1_span_1_Template, 2, 1, \"span\", 22);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(5);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1._closeiconTemplate && !ctx_r1.closeIconTemplate && !ctx_r1.closeIconT && !(ctx_r1.closeButtonProps == null ? null : ctx_r1.closeButtonProps.icon));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1._closeiconTemplate || ctx_r1.closeIconTemplate || ctx_r1.closeIconT);\n  }\n}\n\nfunction Dialog_div_0_div_1_ng_template_3_p_button_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"p-button\", 23);\n    i0.ɵɵlistener(\"onClick\", function Dialog_div_0_div_1_ng_template_3_p_button_7_Template_p_button_onClick_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r1 = i0.ɵɵnextContext(4);\n      return i0.ɵɵresetView(ctx_r1.close($event));\n    })(\"keydown.enter\", function Dialog_div_0_div_1_ng_template_3_p_button_7_Template_p_button_keydown_enter_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r1 = i0.ɵɵnextContext(4);\n      return i0.ɵɵresetView(ctx_r1.close($event));\n    });\n    i0.ɵɵtemplate(1, Dialog_div_0_div_1_ng_template_3_p_button_7_ng_template_1_Template, 2, 2, \"ng-template\", null, 4, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(4);\n    i0.ɵɵproperty(\"styleClass\", ctx_r1.cx(\"pcCloseButton\"))(\"ariaLabel\", ctx_r1.closeAriaLabel)(\"tabindex\", ctx_r1.closeTabindex)(\"buttonProps\", ctx_r1.closeButtonProps);\n  }\n}\n\nfunction Dialog_div_0_div_1_ng_template_3_ng_container_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction Dialog_div_0_div_1_ng_template_3_div_12_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction Dialog_div_0_div_1_ng_template_3_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15, 5);\n    i0.ɵɵprojection(2, 1);\n    i0.ɵɵtemplate(3, Dialog_div_0_div_1_ng_template_3_div_12_ng_container_3_Template, 1, 0, \"ng-container\", 11);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(4);\n    i0.ɵɵproperty(\"ngClass\", ctx_r1.cx(\"footer\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1._footerTemplate || ctx_r1.footerTemplate || ctx_r1.footerT);\n  }\n}\n\nfunction Dialog_div_0_div_1_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵtemplate(0, Dialog_div_0_div_1_ng_template_3_div_0_Template, 1, 1, \"div\", 12);\n    i0.ɵɵelementStart(1, \"div\", 13, 2);\n    i0.ɵɵlistener(\"mousedown\", function Dialog_div_0_div_1_ng_template_3_Template_div_mousedown_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext(3);\n      return i0.ɵɵresetView(ctx_r1.initDrag($event));\n    });\n    i0.ɵɵtemplate(3, Dialog_div_0_div_1_ng_template_3_span_3_Template, 2, 3, \"span\", 14)(4, Dialog_div_0_div_1_ng_template_3_ng_container_4_Template, 1, 0, \"ng-container\", 11);\n    i0.ɵɵelementStart(5, \"div\", 15);\n    i0.ɵɵtemplate(6, Dialog_div_0_div_1_ng_template_3_p_button_6_Template, 5, 8, \"p-button\", 16)(7, Dialog_div_0_div_1_ng_template_3_p_button_7_Template, 3, 4, \"p-button\", 17);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"div\", 7, 3);\n    i0.ɵɵprojection(10);\n    i0.ɵɵtemplate(11, Dialog_div_0_div_1_ng_template_3_ng_container_11_Template, 1, 0, \"ng-container\", 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(12, Dialog_div_0_div_1_ng_template_3_div_12_Template, 4, 2, \"div\", 18);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.resizable);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngClass\", ctx_r1.cx(\"header\"));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1._headerTemplate && !ctx_r1.headerTemplate && !ctx_r1.headerT);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1._headerTemplate || ctx_r1.headerTemplate || ctx_r1.headerT);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngClass\", ctx_r1.cx(\"headerActions\"));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.maximizable);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.closable);\n    i0.ɵɵadvance();\n    i0.ɵɵclassMap(ctx_r1.contentStyleClass);\n    i0.ɵɵproperty(\"ngClass\", ctx_r1.cx(\"content\"))(\"ngStyle\", ctx_r1.contentStyle);\n    i0.ɵɵattribute(\"data-pc-section\", \"content\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1._contentTemplate || ctx_r1.contentTemplate || ctx_r1.contentT);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1._footerTemplate || ctx_r1.footerTemplate || ctx_r1.footerT);\n  }\n}\n\nfunction Dialog_div_0_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 9, 0);\n    i0.ɵɵlistener(\"@animation.start\", function Dialog_div_0_div_1_Template_div_animation_animation_start_0_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.onAnimationStart($event));\n    })(\"@animation.done\", function Dialog_div_0_div_1_Template_div_animation_animation_done_0_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r1.onAnimationEnd($event));\n    });\n    i0.ɵɵtemplate(2, Dialog_div_0_div_1_ng_container_2_Template, 2, 1, \"ng-container\", 10)(3, Dialog_div_0_div_1_ng_template_3_Template, 13, 14, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const notHeadless_r7 = i0.ɵɵreference(4);\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵstyleMap(ctx_r1.style);\n    i0.ɵɵclassMap(ctx_r1.styleClass);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(13, _c11, ctx_r1.maximizable && ctx_r1.maximized))(\"ngStyle\", i0.ɵɵpureFunction0(15, _c12))(\"pFocusTrapDisabled\", ctx_r1.focusTrap === false)(\"@animation\", i0.ɵɵpureFunction1(19, _c14, i0.ɵɵpureFunction2(16, _c13, ctx_r1.transformOptions, ctx_r1.transitionOptions)));\n    i0.ɵɵattribute(\"role\", ctx_r1.role)(\"aria-labelledby\", ctx_r1.ariaLabelledBy)(\"aria-modal\", true);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1._headlessTemplate || ctx_r1.headlessTemplate || ctx_r1.headlessT)(\"ngIfElse\", notHeadless_r7);\n  }\n}\n\nfunction Dialog_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 7);\n    i0.ɵɵtemplate(1, Dialog_div_0_div_1_Template, 5, 21, \"div\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵstyleMap(ctx_r1.maskStyle);\n    i0.ɵɵclassMap(ctx_r1.maskStyleClass);\n    i0.ɵɵproperty(\"ngClass\", ctx_r1.maskClass)(\"ngStyle\", i0.ɵɵpureFunction3(7, _c10, ctx_r1.position === \"left\" || ctx_r1.position === \"topleft\" || ctx_r1.position === \"bottomleft\" ? \"flex-start\" : ctx_r1.position === \"right\" || ctx_r1.position === \"topright\" || ctx_r1.position === \"bottomright\" ? \"flex-end\" : \"center\", ctx_r1.position === \"top\" || ctx_r1.position === \"topleft\" || ctx_r1.position === \"topright\" ? \"flex-start\" : ctx_r1.position === \"bottom\" || ctx_r1.position === \"bottomleft\" || ctx_r1.position === \"bottomright\" ? \"flex-end\" : \"center\", ctx_r1.modal ? \"auto\" : \"none\"));\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.visible);\n  }\n}\n\nconst showAnimation = animation([style({\n  transform: '{{transform}}',\n  opacity: 0\n}), animate('{{transition}}')]);\nconst hideAnimation = animation([animate('{{transition}}', style({\n  transform: '{{transform}}',\n  opacity: 0\n}))]);\n/**\n * Dialog is a container to display content in an overlay window.\n * @group Components\n */\n\nclass Dialog extends BaseComponent {\n  /**\n   * Title text of the dialog.\n   * @group Props\n   */\n  header;\n  /**\n   * Enables dragging to change the position using header.\n   * @group Props\n   */\n\n  draggable = true;\n  /**\n   * Enables resizing of the content.\n   * @group Props\n   */\n\n  resizable = true;\n  /**\n   * Defines the left offset of dialog.\n   * @group Props\n   * @deprecated positionLeft property is deprecated.\n   */\n\n  get positionLeft() {\n    return 0;\n  }\n\n  set positionLeft(_positionLeft) {\n    console.log('positionLeft property is deprecated.');\n  }\n  /**\n   * Defines the top offset of dialog.\n   * @group Props\n   * @deprecated positionTop property is deprecated.\n   */\n\n\n  get positionTop() {\n    return 0;\n  }\n\n  set positionTop(_positionTop) {\n    console.log('positionTop property is deprecated.');\n  }\n  /**\n   * Style of the content section.\n   * @group Props\n   */\n\n\n  contentStyle;\n  /**\n   * Style class of the content.\n   * @group Props\n   */\n\n  contentStyleClass;\n  /**\n   * Defines if background should be blocked when dialog is displayed.\n   * @group Props\n   */\n\n  modal = false;\n  /**\n   * Specifies if pressing escape key should hide the dialog.\n   * @group Props\n   */\n\n  closeOnEscape = true;\n  /**\n   * Specifies if clicking the modal background should hide the dialog.\n   * @group Props\n   */\n\n  dismissableMask = false;\n  /**\n   * When enabled dialog is displayed in RTL direction.\n   * @group Props\n   */\n\n  rtl = false;\n  /**\n   * Adds a close icon to the header to hide the dialog.\n   * @group Props\n   */\n\n  closable = true;\n  /**\n   * Defines if the component is responsive.\n   * @group Props\n   * @deprecated Responsive property is deprecated.\n   */\n\n  get responsive() {\n    return false;\n  }\n\n  set responsive(_responsive) {\n    console.log('Responsive property is deprecated.');\n  }\n  /**\n   * Target element to attach the dialog, valid values are \"body\" or a local ng-template variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]=\"mydiv\" for a div element having #mydiv as variable name).\n   * @group Props\n   */\n\n\n  appendTo;\n  /**\n   * Object literal to define widths per screen size.\n   * @group Props\n   */\n\n  breakpoints;\n  /**\n   * Style class of the component.\n   * @group Props\n   */\n\n  styleClass;\n  /**\n   * Style class of the mask.\n   * @group Props\n   */\n\n  maskStyleClass;\n  /**\n   * Style of the mask.\n   * @group Props\n   */\n\n  maskStyle;\n  /**\n   * Whether to show the header or not.\n   * @group Props\n   */\n\n  showHeader = true;\n  /**\n   * Defines the breakpoint of the component responsive.\n   * @group Props\n   * @deprecated Breakpoint property is not utilized and deprecated. Use breakpoints or CSS media queries instead.\n   */\n\n  get breakpoint() {\n    return 649;\n  }\n\n  set breakpoint(_breakpoint) {\n    console.log('Breakpoint property is not utilized and deprecated, use breakpoints or CSS media queries instead.');\n  }\n  /**\n   * Whether background scroll should be blocked when dialog is visible.\n   * @group Props\n   */\n\n\n  blockScroll = false;\n  /**\n   * Whether to automatically manage layering.\n   * @group Props\n   */\n\n  autoZIndex = true;\n  /**\n   * Base zIndex value to use in layering.\n   * @group Props\n   */\n\n  baseZIndex = 0;\n  /**\n   * Minimum value for the left coordinate of dialog in dragging.\n   * @group Props\n   */\n\n  minX = 0;\n  /**\n   * Minimum value for the top coordinate of dialog in dragging.\n   * @group Props\n   */\n\n  minY = 0;\n  /**\n   * When enabled, first focusable element receives focus on show.\n   * @group Props\n   */\n\n  focusOnShow = true;\n  /**\n   * Whether the dialog can be displayed full screen.\n   * @group Props\n   */\n\n  maximizable = false;\n  /**\n   * Keeps dialog in the viewport.\n   * @group Props\n   */\n\n  keepInViewport = true;\n  /**\n   * When enabled, can only focus on elements inside the dialog.\n   * @group Props\n   */\n\n  focusTrap = true;\n  /**\n   * Transition options of the animation.\n   * @group Props\n   */\n\n  transitionOptions = '150ms cubic-bezier(0, 0, 0.2, 1)';\n  /**\n   * Name of the close icon.\n   * @group Props\n   */\n\n  closeIcon;\n  /**\n   * Defines a string that labels the close button for accessibility.\n   * @group Props\n   */\n\n  closeAriaLabel;\n  /**\n   * Index of the close button in tabbing order.\n   * @group Props\n   */\n\n  closeTabindex = '0';\n  /**\n   * Name of the minimize icon.\n   * @group Props\n   */\n\n  minimizeIcon;\n  /**\n   * Name of the maximize icon.\n   * @group Props\n   */\n\n  maximizeIcon;\n  /**\n   * Used to pass all properties of the ButtonProps to the Button component.\n   * @group Props\n   */\n\n  closeButtonProps = {\n    severity: 'secondary',\n    text: true,\n    rounded: true\n  };\n  /**\n   * Used to pass all properties of the ButtonProps to the Button component.\n   * @group Props\n   */\n\n  maximizeButtonProps = {\n    severity: 'secondary',\n    text: true,\n    rounded: true\n  };\n  /**\n   * Specifies the visibility of the dialog.\n   * @group Props\n   */\n\n  get visible() {\n    return this._visible;\n  }\n\n  set visible(value) {\n    this._visible = value;\n\n    if (this._visible && !this.maskVisible) {\n      this.maskVisible = true;\n    }\n  }\n  /**\n   * Inline style of the component.\n   * @group Props\n   */\n\n\n  get style() {\n    return this._style;\n  }\n\n  set style(value) {\n    if (value) {\n      this._style = { ...value\n      };\n      this.originalStyle = value;\n    }\n  }\n  /**\n   * Position of the dialog.\n   * @group Props\n   */\n\n\n  get position() {\n    return this._position;\n  }\n\n  set position(value) {\n    this._position = value;\n\n    switch (value) {\n      case 'topleft':\n      case 'bottomleft':\n      case 'left':\n        this.transformOptions = 'translate3d(-100%, 0px, 0px)';\n        break;\n\n      case 'topright':\n      case 'bottomright':\n      case 'right':\n        this.transformOptions = 'translate3d(100%, 0px, 0px)';\n        break;\n\n      case 'bottom':\n        this.transformOptions = 'translate3d(0px, 100%, 0px)';\n        break;\n\n      case 'top':\n        this.transformOptions = 'translate3d(0px, -100%, 0px)';\n        break;\n\n      default:\n        this.transformOptions = 'scale(0.7)';\n        break;\n    }\n  }\n  /**\n   * Role attribute of html element.\n   * @group Emits\n   */\n\n\n  role = 'dialog';\n  /**\n   * Callback to invoke when dialog is shown.\n   * @group Emits\n   */\n\n  onShow = new EventEmitter();\n  /**\n   * Callback to invoke when dialog is hidden.\n   * @group Emits\n   */\n\n  onHide = new EventEmitter();\n  /**\n   * This EventEmitter is used to notify changes in the visibility state of a component.\n   * @param {boolean} value - New value.\n   * @group Emits\n   */\n\n  visibleChange = new EventEmitter();\n  /**\n   * Callback to invoke when dialog resizing is initiated.\n   * @param {MouseEvent} event - Mouse event.\n   * @group Emits\n   */\n\n  onResizeInit = new EventEmitter();\n  /**\n   * Callback to invoke when dialog resizing is completed.\n   * @param {MouseEvent} event - Mouse event.\n   * @group Emits\n   */\n\n  onResizeEnd = new EventEmitter();\n  /**\n   * Callback to invoke when dialog dragging is completed.\n   * @param {DragEvent} event - Drag event.\n   * @group Emits\n   */\n\n  onDragEnd = new EventEmitter();\n  /**\n   * Callback to invoke when dialog maximized or unmaximized.\n   * @group Emits\n   */\n\n  onMaximize = new EventEmitter();\n  headerViewChild;\n  contentViewChild;\n  footerViewChild;\n  /**\n   * Header template.\n   * @group Props\n   */\n\n  headerTemplate;\n  /**\n   * Content template.\n   * @group Props\n   */\n\n  contentTemplate;\n  /**\n   * Footer template.\n   * @group Props\n   */\n\n  footerTemplate;\n  /**\n   * Close icon template.\n   * @group Props\n   */\n\n  closeIconTemplate;\n  /**\n   * Maximize icon template.\n   * @group Props\n   */\n\n  maximizeIconTemplate;\n  /**\n   * Minimize icon template.\n   * @group Props\n   */\n\n  minimizeIconTemplate;\n  /**\n   * Headless template.\n   * @group Props\n   */\n\n  headlessTemplate;\n  _headerTemplate;\n  _contentTemplate;\n  _footerTemplate;\n  _closeiconTemplate;\n  _maximizeiconTemplate;\n  _minimizeiconTemplate;\n  _headlessTemplate;\n  _visible = false;\n  maskVisible;\n  container;\n  wrapper;\n  dragging;\n  ariaLabelledBy = this.getAriaLabelledBy();\n  documentDragListener;\n  documentDragEndListener;\n  resizing;\n  documentResizeListener;\n  documentResizeEndListener;\n  documentEscapeListener;\n  maskClickListener;\n  lastPageX;\n  lastPageY;\n  preventVisibleChangePropagation;\n  maximized;\n  preMaximizeContentHeight;\n  preMaximizeContainerWidth;\n  preMaximizeContainerHeight;\n  preMaximizePageX;\n  preMaximizePageY;\n  id = uuid('pn_id_');\n  _style = {};\n  _position = 'center';\n  originalStyle;\n  transformOptions = 'scale(0.7)';\n  styleElement;\n  window;\n  _componentStyle = inject(DialogStyle);\n  headerT;\n  contentT;\n  footerT;\n  closeIconT;\n  maximizeIconT;\n  minimizeIconT;\n  headlessT;\n\n  get maximizeLabel() {\n    return this.config.getTranslation(TranslationKeys.ARIA)['maximizeLabel'];\n  }\n\n  zone = inject(NgZone);\n\n  get maskClass() {\n    const positions = ['left', 'right', 'top', 'topleft', 'topright', 'bottom', 'bottomleft', 'bottomright'];\n    const pos = positions.find(item => item === this.position);\n    return {\n      'p-dialog-mask': true,\n      'p-overlay-mask p-overlay-mask-enter': this.modal || this.dismissableMask,\n      [`p-dialog-${pos}`]: pos\n    };\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n\n    if (this.breakpoints) {\n      this.createStyle();\n    }\n  }\n\n  templates;\n\n  ngAfterContentInit() {\n    this.templates?.forEach(item => {\n      switch (item.getType()) {\n        case 'header':\n          this.headerT = item.template;\n          break;\n\n        case 'content':\n          this.contentT = item.template;\n          break;\n\n        case 'footer':\n          this.footerT = item.template;\n          break;\n\n        case 'closeicon':\n          this.closeIconT = item.template;\n          break;\n\n        case 'maximizeicon':\n          this.maximizeIconT = item.template;\n          break;\n\n        case 'minimizeicon':\n          this.minimizeIconT = item.template;\n          break;\n\n        case 'headless':\n          this.headlessT = item.template;\n          break;\n\n        default:\n          this.contentT = item.template;\n          break;\n      }\n    });\n  }\n\n  getAriaLabelledBy() {\n    return this.header !== null ? uuid('pn_id_') + '_header' : null;\n  }\n\n  parseDurationToMilliseconds(durationString) {\n    const transitionTimeRegex = /([\\d\\.]+)(ms|s)\\b/g;\n    let totalMilliseconds = 0;\n    let match;\n\n    while ((match = transitionTimeRegex.exec(durationString)) !== null) {\n      const value = parseFloat(match[1]);\n      const unit = match[2];\n\n      if (unit === 'ms') {\n        totalMilliseconds += value;\n      } else if (unit === 's') {\n        totalMilliseconds += value * 1000;\n      }\n    }\n\n    if (totalMilliseconds === 0) {\n      return undefined;\n    }\n\n    return totalMilliseconds;\n  }\n\n  _focus(focusParentElement) {\n    if (focusParentElement) {\n      const timeoutDuration = this.parseDurationToMilliseconds(this.transitionOptions);\n\n      let _focusableElements = DomHandler.getFocusableElements(focusParentElement);\n\n      if (_focusableElements && _focusableElements.length > 0) {\n        this.zone.runOutsideAngular(() => {\n          setTimeout(() => _focusableElements[0].focus(), timeoutDuration || 5);\n        });\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  focus(focusParentElement) {\n    let focused = this._focus(focusParentElement);\n\n    if (!focused) {\n      focused = this._focus(this.footerViewChild?.nativeElement);\n\n      if (!focused) {\n        focused = this._focus(this.headerViewChild?.nativeElement);\n\n        if (!focused) {\n          this._focus(this.contentViewChild?.nativeElement);\n        }\n      }\n    }\n  }\n\n  close(event) {\n    this.visibleChange.emit(false);\n    event.preventDefault();\n  }\n\n  enableModality() {\n    if (this.closable && this.dismissableMask) {\n      this.maskClickListener = this.renderer.listen(this.wrapper, 'mousedown', event => {\n        if (this.wrapper && this.wrapper.isSameNode(event.target)) {\n          this.close(event);\n        }\n      });\n    }\n\n    if (this.modal) {\n      blockBodyScroll();\n    }\n  }\n\n  disableModality() {\n    if (this.wrapper) {\n      if (this.dismissableMask) {\n        this.unbindMaskClickListener();\n      } // for nested dialogs w/modal\n\n\n      const scrollBlockers = document.querySelectorAll('.p-dialog-mask-scrollblocker');\n\n      if (this.modal && scrollBlockers && scrollBlockers.length == 1) {\n        unblockBodyScroll();\n      }\n\n      if (!this.cd.destroyed) {\n        this.cd.detectChanges();\n      }\n    }\n  }\n\n  maximize() {\n    this.maximized = !this.maximized;\n\n    if (!this.modal && !this.blockScroll) {\n      if (this.maximized) {\n        blockBodyScroll();\n      } else {\n        unblockBodyScroll();\n      }\n    }\n\n    this.onMaximize.emit({\n      maximized: this.maximized\n    });\n  }\n\n  unbindMaskClickListener() {\n    if (this.maskClickListener) {\n      this.maskClickListener();\n      this.maskClickListener = null;\n    }\n  }\n\n  moveOnTop() {\n    if (this.autoZIndex) {\n      ZIndexUtils.set('modal', this.container, this.baseZIndex + this.config.zIndex.modal);\n      this.wrapper.style.zIndex = String(parseInt(this.container.style.zIndex, 10) - 1);\n    }\n  }\n\n  createStyle() {\n    if (isPlatformBrowser(this.platformId)) {\n      if (!this.styleElement) {\n        this.styleElement = this.renderer.createElement('style');\n        this.styleElement.type = 'text/css';\n        this.renderer.appendChild(this.document.head, this.styleElement);\n        let innerHTML = '';\n\n        for (let breakpoint in this.breakpoints) {\n          innerHTML += `\n                        @media screen and (max-width: ${breakpoint}) {\n                            .p-dialog[${this.id}]:not(.p-dialog-maximized) {\n                                width: ${this.breakpoints[breakpoint]} !important;\n                            }\n                        }\n                    `;\n        }\n\n        this.renderer.setProperty(this.styleElement, 'innerHTML', innerHTML);\n        setAttribute(this.styleElement, 'nonce', this.config?.csp()?.nonce);\n      }\n    }\n  }\n\n  initDrag(event) {\n    if (hasClass(event.target, 'p-dialog-maximize-icon') || hasClass(event.target, 'p-dialog-header-close-icon') || hasClass(event.target.parentElement, 'p-dialog-header-icon')) {\n      return;\n    }\n\n    if (this.draggable) {\n      this.dragging = true;\n      this.lastPageX = event.pageX;\n      this.lastPageY = event.pageY;\n      this.container.style.margin = '0';\n      addClass(this.document.body, 'p-unselectable-text');\n    }\n  }\n\n  onDrag(event) {\n    if (this.dragging) {\n      const containerWidth = getOuterWidth(this.container);\n      const containerHeight = getOuterHeight(this.container);\n      const deltaX = event.pageX - this.lastPageX;\n      const deltaY = event.pageY - this.lastPageY;\n      const offset = this.container.getBoundingClientRect();\n      const containerComputedStyle = getComputedStyle(this.container);\n      const leftMargin = parseFloat(containerComputedStyle.marginLeft);\n      const topMargin = parseFloat(containerComputedStyle.marginTop);\n      const leftPos = offset.left + deltaX - leftMargin;\n      const topPos = offset.top + deltaY - topMargin;\n      const viewport = getViewport();\n      this.container.style.position = 'fixed';\n\n      if (this.keepInViewport) {\n        if (leftPos >= this.minX && leftPos + containerWidth < viewport.width) {\n          this._style.left = `${leftPos}px`;\n          this.lastPageX = event.pageX;\n          this.container.style.left = `${leftPos}px`;\n        }\n\n        if (topPos >= this.minY && topPos + containerHeight < viewport.height) {\n          this._style.top = `${topPos}px`;\n          this.lastPageY = event.pageY;\n          this.container.style.top = `${topPos}px`;\n        }\n      } else {\n        this.lastPageX = event.pageX;\n        this.container.style.left = `${leftPos}px`;\n        this.lastPageY = event.pageY;\n        this.container.style.top = `${topPos}px`;\n      }\n    }\n  }\n\n  endDrag(event) {\n    if (this.dragging) {\n      this.dragging = false;\n      removeClass(this.document.body, 'p-unselectable-text');\n      this.cd.detectChanges();\n      this.onDragEnd.emit(event);\n    }\n  }\n\n  resetPosition() {\n    this.container.style.position = '';\n    this.container.style.left = '';\n    this.container.style.top = '';\n    this.container.style.margin = '';\n  } //backward compatibility\n\n\n  center() {\n    this.resetPosition();\n  }\n\n  initResize(event) {\n    if (this.resizable) {\n      this.resizing = true;\n      this.lastPageX = event.pageX;\n      this.lastPageY = event.pageY;\n      addClass(this.document.body, 'p-unselectable-text');\n      this.onResizeInit.emit(event);\n    }\n  }\n\n  onResize(event) {\n    if (this.resizing) {\n      let deltaX = event.pageX - this.lastPageX;\n      let deltaY = event.pageY - this.lastPageY;\n      let containerWidth = getOuterWidth(this.container);\n      let containerHeight = getOuterHeight(this.container);\n      let contentHeight = getOuterHeight(this.contentViewChild?.nativeElement);\n      let newWidth = containerWidth + deltaX;\n      let newHeight = containerHeight + deltaY;\n      let minWidth = this.container.style.minWidth;\n      let minHeight = this.container.style.minHeight;\n      let offset = this.container.getBoundingClientRect();\n      let viewport = getViewport();\n      let hasBeenDragged = !parseInt(this.container.style.top) || !parseInt(this.container.style.left);\n\n      if (hasBeenDragged) {\n        newWidth += deltaX;\n        newHeight += deltaY;\n      }\n\n      if ((!minWidth || newWidth > parseInt(minWidth)) && offset.left + newWidth < viewport.width) {\n        this._style.width = newWidth + 'px';\n        this.container.style.width = this._style.width;\n      }\n\n      if ((!minHeight || newHeight > parseInt(minHeight)) && offset.top + newHeight < viewport.height) {\n        this.contentViewChild.nativeElement.style.height = contentHeight + newHeight - containerHeight + 'px';\n\n        if (this._style.height) {\n          this._style.height = newHeight + 'px';\n          this.container.style.height = this._style.height;\n        }\n      }\n\n      this.lastPageX = event.pageX;\n      this.lastPageY = event.pageY;\n    }\n  }\n\n  resizeEnd(event) {\n    if (this.resizing) {\n      this.resizing = false;\n      removeClass(this.document.body, 'p-unselectable-text');\n      this.onResizeEnd.emit(event);\n    }\n  }\n\n  bindGlobalListeners() {\n    if (this.draggable) {\n      this.bindDocumentDragListener();\n      this.bindDocumentDragEndListener();\n    }\n\n    if (this.resizable) {\n      this.bindDocumentResizeListeners();\n    }\n\n    if (this.closeOnEscape && this.closable) {\n      this.bindDocumentEscapeListener();\n    }\n  }\n\n  unbindGlobalListeners() {\n    this.unbindDocumentDragListener();\n    this.unbindDocumentDragEndListener();\n    this.unbindDocumentResizeListeners();\n    this.unbindDocumentEscapeListener();\n  }\n\n  bindDocumentDragListener() {\n    if (!this.documentDragListener) {\n      this.zone.runOutsideAngular(() => {\n        this.documentDragListener = this.renderer.listen(this.document.defaultView, 'mousemove', this.onDrag.bind(this));\n      });\n    }\n  }\n\n  unbindDocumentDragListener() {\n    if (this.documentDragListener) {\n      this.documentDragListener();\n      this.documentDragListener = null;\n    }\n  }\n\n  bindDocumentDragEndListener() {\n    if (!this.documentDragEndListener) {\n      this.zone.runOutsideAngular(() => {\n        this.documentDragEndListener = this.renderer.listen(this.document.defaultView, 'mouseup', this.endDrag.bind(this));\n      });\n    }\n  }\n\n  unbindDocumentDragEndListener() {\n    if (this.documentDragEndListener) {\n      this.documentDragEndListener();\n      this.documentDragEndListener = null;\n    }\n  }\n\n  bindDocumentResizeListeners() {\n    if (!this.documentResizeListener && !this.documentResizeEndListener) {\n      this.zone.runOutsideAngular(() => {\n        this.documentResizeListener = this.renderer.listen(this.document.defaultView, 'mousemove', this.onResize.bind(this));\n        this.documentResizeEndListener = this.renderer.listen(this.document.defaultView, 'mouseup', this.resizeEnd.bind(this));\n      });\n    }\n  }\n\n  unbindDocumentResizeListeners() {\n    if (this.documentResizeListener && this.documentResizeEndListener) {\n      this.documentResizeListener();\n      this.documentResizeEndListener();\n      this.documentResizeListener = null;\n      this.documentResizeEndListener = null;\n    }\n  }\n\n  bindDocumentEscapeListener() {\n    const documentTarget = this.el ? this.el.nativeElement.ownerDocument : 'document';\n    this.documentEscapeListener = this.renderer.listen(documentTarget, 'keydown', event => {\n      if (event.key == 'Escape') {\n        this.close(event);\n      }\n    });\n  }\n\n  unbindDocumentEscapeListener() {\n    if (this.documentEscapeListener) {\n      this.documentEscapeListener();\n      this.documentEscapeListener = null;\n    }\n  }\n\n  appendContainer() {\n    if (this.appendTo) {\n      if (this.appendTo === 'body') this.renderer.appendChild(this.document.body, this.wrapper);else appendChild(this.appendTo, this.wrapper);\n    }\n  }\n\n  restoreAppend() {\n    if (this.container && this.appendTo) {\n      this.renderer.appendChild(this.el.nativeElement, this.wrapper);\n    }\n  }\n\n  onAnimationStart(event) {\n    switch (event.toState) {\n      case 'visible':\n        this.container = event.element;\n        this.wrapper = this.container?.parentElement;\n        this.appendContainer();\n        this.moveOnTop();\n        this.bindGlobalListeners();\n        this.container?.setAttribute(this.id, '');\n\n        if (this.modal) {\n          this.enableModality();\n        } // if (!this.modal && this.blockScroll) {\n        //     addClass(this.document.body, 'p-overflow-hidden');\n        // }\n\n\n        if (this.focusOnShow) {\n          this.focus();\n        }\n\n        break;\n\n      case 'void':\n        if (this.wrapper && this.modal) {\n          addClass(this.wrapper, 'p-overlay-mask-leave');\n        }\n\n        break;\n    }\n  }\n\n  onAnimationEnd(event) {\n    switch (event.toState) {\n      case 'void':\n        this.onContainerDestroy();\n        this.onHide.emit({});\n        this.cd.markForCheck();\n        break;\n\n      case 'visible':\n        this.onShow.emit({});\n        break;\n    }\n  }\n\n  onContainerDestroy() {\n    this.unbindGlobalListeners();\n    this.dragging = false;\n    this.maskVisible = false;\n\n    if (this.maximized) {\n      // removeClass(this.document.body, 'p-overflow-hidden')\n      this.document.body.style.removeProperty('--scrollbar;-width');\n      this.maximized = false;\n    }\n\n    if (this.modal) {\n      this.disableModality();\n    } // if (this.blockScroll) {\n    //      removeClass(this.document.body, 'p-overflow-hidden');\n    // }\n\n\n    if (hasClass(this.document.body, 'p-overflow-hidden')) {\n      removeClass(this.document.body, 'p-overflow-hidden');\n    }\n\n    if (this.container && this.autoZIndex) {\n      ZIndexUtils.clear(this.container);\n    }\n\n    this.container = null;\n    this.wrapper = null;\n    this._style = this.originalStyle ? { ...this.originalStyle\n    } : {};\n  }\n\n  destroyStyle() {\n    if (this.styleElement) {\n      this.renderer.removeChild(this.document.head, this.styleElement);\n      this.styleElement = null;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.container) {\n      this.restoreAppend();\n      this.onContainerDestroy();\n    }\n\n    this.destroyStyle();\n    super.ngOnDestroy();\n  }\n\n  static ɵfac = /*@__PURE__*/(() => {\n    let ɵDialog_BaseFactory;\n    return function Dialog_Factory(__ngFactoryType__) {\n      return (ɵDialog_BaseFactory || (ɵDialog_BaseFactory = i0.ɵɵgetInheritedFactory(Dialog)))(__ngFactoryType__ || Dialog);\n    };\n  })();\n  static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: Dialog,\n    selectors: [[\"p-dialog\"]],\n    contentQueries: function Dialog_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, _c0, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c1, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c2, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c3, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c4, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c5, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c6, 4);\n        i0.ɵɵcontentQuery(dirIndex, PrimeTemplate, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._headerTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._contentTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._footerTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._closeiconTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._maximizeiconTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._minimizeiconTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._headlessTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templates = _t);\n      }\n    },\n    viewQuery: function Dialog_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c7, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n        i0.ɵɵviewQuery(_c2, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.headerViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.contentViewChild = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.footerViewChild = _t.first);\n      }\n    },\n    inputs: {\n      header: \"header\",\n      draggable: [2, \"draggable\", \"draggable\", booleanAttribute],\n      resizable: [2, \"resizable\", \"resizable\", booleanAttribute],\n      positionLeft: \"positionLeft\",\n      positionTop: \"positionTop\",\n      contentStyle: \"contentStyle\",\n      contentStyleClass: \"contentStyleClass\",\n      modal: [2, \"modal\", \"modal\", booleanAttribute],\n      closeOnEscape: [2, \"closeOnEscape\", \"closeOnEscape\", booleanAttribute],\n      dismissableMask: [2, \"dismissableMask\", \"dismissableMask\", booleanAttribute],\n      rtl: [2, \"rtl\", \"rtl\", booleanAttribute],\n      closable: [2, \"closable\", \"closable\", booleanAttribute],\n      responsive: \"responsive\",\n      appendTo: \"appendTo\",\n      breakpoints: \"breakpoints\",\n      styleClass: \"styleClass\",\n      maskStyleClass: \"maskStyleClass\",\n      maskStyle: \"maskStyle\",\n      showHeader: [2, \"showHeader\", \"showHeader\", booleanAttribute],\n      breakpoint: \"breakpoint\",\n      blockScroll: [2, \"blockScroll\", \"blockScroll\", booleanAttribute],\n      autoZIndex: [2, \"autoZIndex\", \"autoZIndex\", booleanAttribute],\n      baseZIndex: [2, \"baseZIndex\", \"baseZIndex\", numberAttribute],\n      minX: [2, \"minX\", \"minX\", numberAttribute],\n      minY: [2, \"minY\", \"minY\", numberAttribute],\n      focusOnShow: [2, \"focusOnShow\", \"focusOnShow\", booleanAttribute],\n      maximizable: [2, \"maximizable\", \"maximizable\", booleanAttribute],\n      keepInViewport: [2, \"keepInViewport\", \"keepInViewport\", booleanAttribute],\n      focusTrap: [2, \"focusTrap\", \"focusTrap\", booleanAttribute],\n      transitionOptions: \"transitionOptions\",\n      closeIcon: \"closeIcon\",\n      closeAriaLabel: \"closeAriaLabel\",\n      closeTabindex: \"closeTabindex\",\n      minimizeIcon: \"minimizeIcon\",\n      maximizeIcon: \"maximizeIcon\",\n      closeButtonProps: \"closeButtonProps\",\n      maximizeButtonProps: \"maximizeButtonProps\",\n      visible: \"visible\",\n      style: \"style\",\n      position: \"position\",\n      role: \"role\",\n      headerTemplate: [0, \"content\", \"headerTemplate\"],\n      contentTemplate: \"contentTemplate\",\n      footerTemplate: \"footerTemplate\",\n      closeIconTemplate: \"closeIconTemplate\",\n      maximizeIconTemplate: \"maximizeIconTemplate\",\n      minimizeIconTemplate: \"minimizeIconTemplate\",\n      headlessTemplate: \"headlessTemplate\"\n    },\n    outputs: {\n      onShow: \"onShow\",\n      onHide: \"onHide\",\n      visibleChange: \"visibleChange\",\n      onResizeInit: \"onResizeInit\",\n      onResizeEnd: \"onResizeEnd\",\n      onDragEnd: \"onDragEnd\",\n      onMaximize: \"onMaximize\"\n    },\n    features: [i0.ɵɵProvidersFeature([DialogStyle]), i0.ɵɵInputTransformsFeature, i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c9,\n    decls: 1,\n    vars: 1,\n    consts: [[\"container\", \"\"], [\"notHeadless\", \"\"], [\"titlebar\", \"\"], [\"content\", \"\"], [\"icon\", \"\"], [\"footer\", \"\"], [3, \"ngClass\", \"class\", \"ngStyle\", \"style\", 4, \"ngIf\"], [3, \"ngClass\", \"ngStyle\"], [\"pFocusTrap\", \"\", 3, \"class\", \"ngClass\", \"ngStyle\", \"style\", \"pFocusTrapDisabled\", 4, \"ngIf\"], [\"pFocusTrap\", \"\", 3, \"ngClass\", \"ngStyle\", \"pFocusTrapDisabled\"], [4, \"ngIf\", \"ngIfElse\"], [4, \"ngTemplateOutlet\"], [\"style\", \"z-index: 90;\", 3, \"ngClass\", \"mousedown\", 4, \"ngIf\"], [3, \"mousedown\", \"ngClass\"], [3, \"id\", \"ngClass\", 4, \"ngIf\"], [3, \"ngClass\"], [3, \"styleClass\", \"tabindex\", \"ariaLabel\", \"buttonProps\", \"onClick\", \"keydown.enter\", 4, \"ngIf\"], [3, \"styleClass\", \"ariaLabel\", \"tabindex\", \"buttonProps\", \"onClick\", \"keydown.enter\", 4, \"ngIf\"], [3, \"ngClass\", 4, \"ngIf\"], [2, \"z-index\", \"90\", 3, \"mousedown\", \"ngClass\"], [3, \"id\", \"ngClass\"], [3, \"onClick\", \"keydown.enter\", \"styleClass\", \"tabindex\", \"ariaLabel\", \"buttonProps\"], [4, \"ngIf\"], [3, \"onClick\", \"keydown.enter\", \"styleClass\", \"ariaLabel\", \"tabindex\", \"buttonProps\"]],\n    template: function Dialog_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef(_c8);\n        i0.ɵɵtemplate(0, Dialog_div_0_Template, 2, 11, \"div\", 6);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.maskVisible);\n      }\n    },\n    dependencies: [CommonModule, i1.NgClass, i1.NgIf, i1.NgTemplateOutlet, i1.NgStyle, Button, FocusTrap, TimesIcon, WindowMaximizeIcon, WindowMinimizeIcon, SharedModule],\n    encapsulation: 2,\n    data: {\n      animation: [trigger('animation', [transition('void => visible', [useAnimation(showAnimation)]), transition('visible => void', [useAnimation(hideAnimation)])])]\n    },\n    changeDetection: 0\n  });\n}\n\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Dialog, [{\n    type: Component,\n    args: [{\n      selector: 'p-dialog',\n      standalone: true,\n      imports: [CommonModule, Button, FocusTrap, TimesIcon, WindowMaximizeIcon, WindowMinimizeIcon, SharedModule],\n      template: `\n        <div\n            *ngIf=\"maskVisible\"\n            [ngClass]=\"maskClass\"\n            [class]=\"maskStyleClass\"\n            [ngStyle]=\"{\n                position: 'fixed',\n                height: '100%',\n                width: '100%',\n                left: 0,\n                top: 0,\n                display: 'flex',\n                'justify-content': position === 'left' || position === 'topleft' || position === 'bottomleft' ? 'flex-start' : position === 'right' || position === 'topright' || position === 'bottomright' ? 'flex-end' : 'center',\n                'align-items': position === 'top' || position === 'topleft' || position === 'topright' ? 'flex-start' : position === 'bottom' || position === 'bottomleft' || position === 'bottomright' ? 'flex-end' : 'center',\n                'pointer-events': modal ? 'auto' : 'none'\n            }\"\n            [style]=\"maskStyle\"\n        >\n            <div\n                *ngIf=\"visible\"\n                #container\n                [class]=\"styleClass\"\n                [ngClass]=\"{ 'p-dialog p-component': true, 'p-dialog-maximized': maximizable && maximized }\"\n                [ngStyle]=\"{ display: 'flex', 'flex-direction': 'column', 'pointer-events': 'auto' }\"\n                [style]=\"style\"\n                pFocusTrap\n                [pFocusTrapDisabled]=\"focusTrap === false\"\n                [@animation]=\"{\n                    value: 'visible',\n                    params: { transform: transformOptions, transition: transitionOptions }\n                }\"\n                (@animation.start)=\"onAnimationStart($event)\"\n                (@animation.done)=\"onAnimationEnd($event)\"\n                [attr.role]=\"role\"\n                [attr.aria-labelledby]=\"ariaLabelledBy\"\n                [attr.aria-modal]=\"true\"\n            >\n                <ng-container *ngIf=\"_headlessTemplate || headlessTemplate || headlessT; else notHeadless\">\n                    <ng-container *ngTemplateOutlet=\"_headlessTemplate || headlessTemplate || headlessT\"></ng-container>\n                </ng-container>\n\n                <ng-template #notHeadless>\n                    <div *ngIf=\"resizable\" [ngClass]=\"cx('resizeHandle')\" style=\"z-index: 90;\" (mousedown)=\"initResize($event)\"></div>\n                    <div #titlebar [ngClass]=\"cx('header')\" (mousedown)=\"initDrag($event)\">\n                        <span [id]=\"ariaLabelledBy\" [ngClass]=\"cx('title')\" *ngIf=\"!_headerTemplate && !headerTemplate && !headerT\">{{ header }}</span>\n                        <ng-container *ngTemplateOutlet=\"_headerTemplate || headerTemplate || headerT\"></ng-container>\n                        <div [ngClass]=\"cx('headerActions')\">\n                            <p-button *ngIf=\"maximizable\" [styleClass]=\"cx('pcMaximizeButton')\" (onClick)=\"maximize()\" (keydown.enter)=\"maximize()\" [tabindex]=\"maximizable ? '0' : '-1'\" [ariaLabel]=\"maximizeLabel\" [buttonProps]=\"maximizeButtonProps\">\n                                <span *ngIf=\"maximizeIcon && !_maximizeiconTemplate && !_minimizeiconTemplate\" [ngClass]=\"maximized ? minimizeIcon : maximizeIcon\"></span>\n                                <ng-container *ngIf=\"!maximizeIcon && !maximizeButtonProps?.icon\">\n                                    <WindowMaximizeIcon *ngIf=\"!maximized && !_maximizeiconTemplate && !maximizeIconTemplate && !maximizeIconT\" />\n                                    <WindowMinimizeIcon *ngIf=\"maximized && !_minimizeiconTemplate && !minimizeIconTemplate && !minimizeIconT\" />\n                                </ng-container>\n                                <ng-container *ngIf=\"!maximized\">\n                                    <ng-template *ngTemplateOutlet=\"_maximizeiconTemplate || maximizeIconTemplate || maximizeIconT\"></ng-template>\n                                </ng-container>\n                                <ng-container *ngIf=\"maximized\">\n                                    <ng-template *ngTemplateOutlet=\"_minimizeiconTemplate || minimizeIconTemplate || minimizeIconT\"></ng-template>\n                                </ng-container>\n                            </p-button>\n                            <p-button *ngIf=\"closable\" [styleClass]=\"cx('pcCloseButton')\" [ariaLabel]=\"closeAriaLabel\" (onClick)=\"close($event)\" (keydown.enter)=\"close($event)\" [tabindex]=\"closeTabindex\" [buttonProps]=\"closeButtonProps\">\n                                <ng-template #icon>\n                                    <ng-container *ngIf=\"!_closeiconTemplate && !closeIconTemplate && !closeIconT && !closeButtonProps?.icon\">\n                                        <span *ngIf=\"closeIcon\" [ngClass]=\"closeIcon\"></span>\n                                        <TimesIcon *ngIf=\"!closeIcon\" />\n                                    </ng-container>\n                                    <span *ngIf=\"_closeiconTemplate || closeIconTemplate || closeIconT\">\n                                        <ng-template *ngTemplateOutlet=\"_closeiconTemplate || closeIconTemplate || closeIconT\"></ng-template>\n                                    </span>\n                                </ng-template>\n                            </p-button>\n                        </div>\n                    </div>\n                    <div #content [ngClass]=\"cx('content')\" [class]=\"contentStyleClass\" [ngStyle]=\"contentStyle\" [attr.data-pc-section]=\"'content'\">\n                        <ng-content></ng-content>\n                        <ng-container *ngTemplateOutlet=\"_contentTemplate || contentTemplate || contentT\"></ng-container>\n                    </div>\n                    <div #footer [ngClass]=\"cx('footer')\" *ngIf=\"_footerTemplate || footerTemplate || footerT\">\n                        <ng-content select=\"p-footer\"></ng-content>\n                        <ng-container *ngTemplateOutlet=\"_footerTemplate || footerTemplate || footerT\"></ng-container>\n                    </div>\n                </ng-template>\n            </div>\n        </div>\n    `,\n      animations: [trigger('animation', [transition('void => visible', [useAnimation(showAnimation)]), transition('visible => void', [useAnimation(hideAnimation)])])],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      providers: [DialogStyle]\n    }]\n  }], null, {\n    header: [{\n      type: Input\n    }],\n    draggable: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    resizable: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    positionLeft: [{\n      type: Input\n    }],\n    positionTop: [{\n      type: Input\n    }],\n    contentStyle: [{\n      type: Input\n    }],\n    contentStyleClass: [{\n      type: Input\n    }],\n    modal: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    closeOnEscape: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    dismissableMask: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    rtl: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    closable: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    responsive: [{\n      type: Input\n    }],\n    appendTo: [{\n      type: Input\n    }],\n    breakpoints: [{\n      type: Input\n    }],\n    styleClass: [{\n      type: Input\n    }],\n    maskStyleClass: [{\n      type: Input\n    }],\n    maskStyle: [{\n      type: Input\n    }],\n    showHeader: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    breakpoint: [{\n      type: Input\n    }],\n    blockScroll: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    autoZIndex: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    baseZIndex: [{\n      type: Input,\n      args: [{\n        transform: numberAttribute\n      }]\n    }],\n    minX: [{\n      type: Input,\n      args: [{\n        transform: numberAttribute\n      }]\n    }],\n    minY: [{\n      type: Input,\n      args: [{\n        transform: numberAttribute\n      }]\n    }],\n    focusOnShow: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    maximizable: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    keepInViewport: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    focusTrap: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    transitionOptions: [{\n      type: Input\n    }],\n    closeIcon: [{\n      type: Input\n    }],\n    closeAriaLabel: [{\n      type: Input\n    }],\n    closeTabindex: [{\n      type: Input\n    }],\n    minimizeIcon: [{\n      type: Input\n    }],\n    maximizeIcon: [{\n      type: Input\n    }],\n    closeButtonProps: [{\n      type: Input\n    }],\n    maximizeButtonProps: [{\n      type: Input\n    }],\n    visible: [{\n      type: Input\n    }],\n    style: [{\n      type: Input\n    }],\n    position: [{\n      type: Input\n    }],\n    role: [{\n      type: Input\n    }],\n    onShow: [{\n      type: Output\n    }],\n    onHide: [{\n      type: Output\n    }],\n    visibleChange: [{\n      type: Output\n    }],\n    onResizeInit: [{\n      type: Output\n    }],\n    onResizeEnd: [{\n      type: Output\n    }],\n    onDragEnd: [{\n      type: Output\n    }],\n    onMaximize: [{\n      type: Output\n    }],\n    headerViewChild: [{\n      type: ViewChild,\n      args: ['titlebar']\n    }],\n    contentViewChild: [{\n      type: ViewChild,\n      args: ['content']\n    }],\n    footerViewChild: [{\n      type: ViewChild,\n      args: ['footer']\n    }],\n    headerTemplate: [{\n      type: Input,\n      args: ['content']\n    }],\n    contentTemplate: [{\n      type: Input\n    }],\n    footerTemplate: [{\n      type: Input\n    }],\n    closeIconTemplate: [{\n      type: Input\n    }],\n    maximizeIconTemplate: [{\n      type: Input\n    }],\n    minimizeIconTemplate: [{\n      type: Input\n    }],\n    headlessTemplate: [{\n      type: Input\n    }],\n    _headerTemplate: [{\n      type: ContentChild,\n      args: ['header', {\n        descendants: false\n      }]\n    }],\n    _contentTemplate: [{\n      type: ContentChild,\n      args: ['content', {\n        descendants: false\n      }]\n    }],\n    _footerTemplate: [{\n      type: ContentChild,\n      args: ['footer', {\n        descendants: false\n      }]\n    }],\n    _closeiconTemplate: [{\n      type: ContentChild,\n      args: ['closeicon', {\n        descendants: false\n      }]\n    }],\n    _maximizeiconTemplate: [{\n      type: ContentChild,\n      args: ['maximizeicon', {\n        descendants: false\n      }]\n    }],\n    _minimizeiconTemplate: [{\n      type: ContentChild,\n      args: ['minimizeicon', {\n        descendants: false\n      }]\n    }],\n    _headlessTemplate: [{\n      type: ContentChild,\n      args: ['headless', {\n        descendants: false\n      }]\n    }],\n    templates: [{\n      type: ContentChildren,\n      args: [PrimeTemplate]\n    }]\n  });\n})();\n\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassDebugInfo(Dialog, {\n    className: \"Dialog\",\n    filePath: \"dialog.ts\",\n    lineNumber: 138\n  });\n})();\n\nclass DialogModule {\n  static ɵfac = function DialogModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || DialogModule)();\n  };\n  static ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: DialogModule\n  });\n  static ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    imports: [Dialog, SharedModule, SharedModule]\n  });\n}\n\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DialogModule, [{\n    type: NgModule,\n    args: [{\n      imports: [Dialog, SharedModule],\n      exports: [Dialog, SharedModule]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(DialogModule, {\n    imports: [Dialog, SharedModule],\n    exports: [Dialog, SharedModule]\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { Dialog, DialogClasses, DialogModule, DialogStyle }; //# sourceMappingURL=primeng-dialog.mjs.map","map":null,"metadata":{},"sourceType":"module"}