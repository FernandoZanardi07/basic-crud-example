{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { AuthService } from './auth.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nexport let MyService = /*#__PURE__*/(() => {\n  class MyService {\n    constructor(http, authService) {\n      this.http = http;\n      this.authService = authService;\n      this.authServer = 'https://localhost:5189/api/';\n      this.webApiServer = 'https://localhost:7101/api/';\n    }\n\n    getAuth(user) {\n      return this.http.post(this.authServer, user).pipe(tap(response => {\n        if (response && response.token) {\n          this.authService.setToken(response.token);\n        }\n      }), catchError(this.handleError));\n    }\n\n    getPersons() {\n      return this.http.get(this.webApiServer + 'person').pipe(catchError(this.handleError));\n    }\n\n    getPersonById(id) {\n      return this.http.get(`${this.webApiServer}person/${id}`).pipe(catchError(this.handleError));\n    }\n\n    addContact(personId, contact) {\n      return this.http.post(`${this.webApiServer}contact/${personId}`, contact).pipe(catchError(this.handleError));\n    }\n\n    getContactsByPersonId(personId) {\n      return this.http.get(`${this.webApiServer}contact/person/${personId}`).pipe(catchError(this.handleError));\n    }\n\n    handleError(error) {\n      let errorMessage = 'Unknown error!';\n\n      if (error.error instanceof ErrorEvent) {\n        // Client-side errors\n        errorMessage = `Error: ${error.error.message}`;\n      } else {\n        // Server-side errors\n        errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n      }\n\n      return throwError(errorMessage);\n    }\n\n  }\n\n  MyService.ɵfac = function MyService_Factory(t) {\n    return new (t || MyService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n  };\n\n  MyService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MyService,\n    factory: MyService.ɵfac,\n    providedIn: 'root'\n  });\n  return MyService;\n})();","map":null,"metadata":{},"sourceType":"module"}