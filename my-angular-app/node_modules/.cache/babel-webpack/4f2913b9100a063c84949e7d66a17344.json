{"ast":null,"code":"import { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { inject, PLATFORM_ID, booleanAttribute, Directive, Input, NgModule } from '@angular/core';\nimport { createElement, getFirstFocusableElement, focus, getLastFocusableElement } from '@primeuix/utils';\nimport { BaseComponent } from 'primeng/basecomponent';\n/**\n * Focus Trap keeps focus within a certain DOM element while tabbing.\n * @group Components\n */\n\nclass FocusTrap extends BaseComponent {\n  /**\n   * When set as true, focus wouldn't be managed.\n   * @group Props\n   */\n  pFocusTrapDisabled = false;\n  platformId = inject(PLATFORM_ID);\n  document = inject(DOCUMENT);\n  firstHiddenFocusableElement;\n  lastHiddenFocusableElement;\n\n  ngOnInit() {\n    super.ngOnInit();\n\n    if (isPlatformBrowser(this.platformId) && !this.pFocusTrapDisabled) {\n      !this.firstHiddenFocusableElement && !this.lastHiddenFocusableElement && this.createHiddenFocusableElements();\n    }\n  }\n\n  ngOnChanges(changes) {\n    super.ngOnChanges(changes);\n\n    if (changes.pFocusTrapDisabled && isPlatformBrowser(this.platformId)) {\n      if (changes.pFocusTrapDisabled.currentValue) {\n        this.removeHiddenFocusableElements();\n      } else {\n        this.createHiddenFocusableElements();\n      }\n    }\n  }\n\n  removeHiddenFocusableElements() {\n    if (this.firstHiddenFocusableElement && this.firstHiddenFocusableElement.parentNode) {\n      this.firstHiddenFocusableElement.parentNode.removeChild(this.firstHiddenFocusableElement);\n    }\n\n    if (this.lastHiddenFocusableElement && this.lastHiddenFocusableElement.parentNode) {\n      this.lastHiddenFocusableElement.parentNode.removeChild(this.lastHiddenFocusableElement);\n    }\n  }\n\n  getComputedSelector(selector) {\n    return `:not(.p-hidden-focusable):not([data-p-hidden-focusable=\"true\"])${selector ?? ''}`;\n  }\n\n  createHiddenFocusableElements() {\n    const tabindex = '0';\n\n    const createFocusableElement = onFocus => {\n      return createElement('span', {\n        class: 'p-hidden-accessible p-hidden-focusable',\n        tabindex,\n        role: 'presentation',\n        'aria-hidden': true,\n        'data-p-hidden-accessible': true,\n        'data-p-hidden-focusable': true,\n        onFocus: onFocus?.bind(this)\n      });\n    };\n\n    this.firstHiddenFocusableElement = createFocusableElement(this.onFirstHiddenElementFocus);\n    this.lastHiddenFocusableElement = createFocusableElement(this.onLastHiddenElementFocus);\n    this.firstHiddenFocusableElement.setAttribute('data-pc-section', 'firstfocusableelement');\n    this.lastHiddenFocusableElement.setAttribute('data-pc-section', 'lastfocusableelement');\n    this.el.nativeElement.prepend(this.firstHiddenFocusableElement);\n    this.el.nativeElement.append(this.lastHiddenFocusableElement);\n  }\n\n  onFirstHiddenElementFocus(event) {\n    const {\n      currentTarget,\n      relatedTarget\n    } = event;\n    const focusableElement = relatedTarget === this.lastHiddenFocusableElement || !this.el.nativeElement?.contains(relatedTarget) ? getFirstFocusableElement(currentTarget.parentElement, ':not(.p-hidden-focusable)') : this.lastHiddenFocusableElement;\n    focus(focusableElement);\n  }\n\n  onLastHiddenElementFocus(event) {\n    const {\n      currentTarget,\n      relatedTarget\n    } = event;\n    const focusableElement = relatedTarget === this.firstHiddenFocusableElement || !this.el.nativeElement?.contains(relatedTarget) ? getLastFocusableElement(currentTarget.parentElement, ':not(.p-hidden-focusable)') : this.firstHiddenFocusableElement;\n    focus(focusableElement);\n  }\n\n  static ɵfac = /*@__PURE__*/(() => {\n    let ɵFocusTrap_BaseFactory;\n    return function FocusTrap_Factory(__ngFactoryType__) {\n      return (ɵFocusTrap_BaseFactory || (ɵFocusTrap_BaseFactory = i0.ɵɵgetInheritedFactory(FocusTrap)))(__ngFactoryType__ || FocusTrap);\n    };\n  })();\n  static ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: FocusTrap,\n    selectors: [[\"\", \"pFocusTrap\", \"\"]],\n    inputs: {\n      pFocusTrapDisabled: [2, \"pFocusTrapDisabled\", \"pFocusTrapDisabled\", booleanAttribute]\n    },\n    features: [i0.ɵɵInputTransformsFeature, i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n  });\n}\n\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FocusTrap, [{\n    type: Directive,\n    args: [{\n      selector: '[pFocusTrap]',\n      standalone: true\n    }]\n  }], null, {\n    pFocusTrapDisabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }]\n  });\n})();\n\nclass FocusTrapModule {\n  static ɵfac = function FocusTrapModule_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || FocusTrapModule)();\n  };\n  static ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: FocusTrapModule\n  });\n  static ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({});\n}\n\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FocusTrapModule, [{\n    type: NgModule,\n    args: [{\n      imports: [FocusTrap],\n      exports: [FocusTrap]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(FocusTrapModule, {\n    imports: [FocusTrap],\n    exports: [FocusTrap]\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { FocusTrap, FocusTrapModule }; //# sourceMappingURL=primeng-focustrap.mjs.map","map":null,"metadata":{},"sourceType":"module"}